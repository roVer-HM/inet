<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="results/IsotropicAntenna-#0.vec"/>
        <input pattern="results/CosineAntenna-#0.vec"/>
        <input pattern="results/DipoleAntenna-#0.vec"/>
        <input pattern="results/IsotropicAntenna-#0.vec"/>
        <input pattern="results/ParabolicAntenna-#0.vec"/>
        <input pattern="results/AxiallySymmetricAntenna-#0.vec"/>
    </inputs>
    <charts>
        <chart name="Isotropic" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(IsotropicAntenna-*) AND module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;&#10;df.vecvalue *= 1000000000&#10;&#10;print(&quot;df:&quot;, df.vecvalue)&#10;&#10;plt.figure(figsize=(7.5,4))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;#plt.legend()&#10;plt.title(&quot;&quot;&quot;Isotropic antenna&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.savefig('isotropicchart.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
        <chart name="Parabolic" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(ParabolicAntenna-*) AND module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;df.vecvalue *= 1000000000&#10;&#10;plt.figure(figsize=(7.5,4))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;#plt.legend()&#10;plt.title(&quot;&quot;&quot;Parabolic antenna&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.savefig('parabolicchart.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
        <chart name="Dipole" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(DipoleAntenna-*) AND module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;df.vecvalue *= 1000000000&#10;&#10;plt.figure(figsize=(7.5,4))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;#plt.legend()&#10;plt.title(&quot;&quot;&quot;Dipole antenna&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.savefig('dipolechart.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
        <chart name="Cosine" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(CosineAntenna-*) AND module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;df.vecvalue *= 1000000000&#10;&#10;plt.figure(figsize=(7.5,4))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;#plt.legend()&#10;plt.title(&quot;&quot;&quot;Cosine antenna&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.savefig('cosinechart.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
        <chart name="16-Yagi" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(AxiallySymmetricAntenna-*) AND module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;df.vecvalue *= 1000000000&#10;&#10;plt.figure(figsize=(7.5,4))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;#plt.legend()&#10;plt.title(&quot;&quot;&quot;Axially symmetric antenna&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.savefig('axiallysymmetricchart.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
        <chart name="16-Yagi (logarithmic)" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(AxiallySymmetricAntenna-*) AND module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;df.vecvalue *= 1000000000&#10;&#10;plt.figure(figsize=(7.5,4))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;#plt.legend()&#10;plt.title(&quot;&quot;&quot;Axially symmetric antenna&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.yscale('log')&#10;&#10;plt.savefig('axiallysymmetricchart_log.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
        <chart name="16-Yagi (linear + logarithmic)" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(AxiallySymmetricAntenna-*) AND module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;df.vecvalue *= 1000000000&#10;&#10;plt.figure(figsize=(7.5,8))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;ax1 = plt.subplot(211)&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;#plt.legend()&#10;plt.title(&quot;&quot;&quot;Axially symmetric antenna&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;ax = plt.gca()&#10;&#10;ax2 = plt.subplot(212)&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default')&#10;    &#10;plt.yscale('log')&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.savefig('axiallysymmetricchart_lin_log.png', dpi=150, transparent=True)&#10;&#10;#plt.savefig('1.png', dpi=150, transparent=True, bbox_inches=(0,4))&#10;&#10;&#10;#plt.subplot(ax,index=2)&#10;&#10;#plt.figure.add_subplot(ax)&#10;&#10;#plt.plots" type="MatplotlibChart"/>
        <chart name="All antennas" script="# IDE version: 5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib as mpl&#10;import matplotlib.pyplot as plt&#10;import numpy as np&#10;&#10;try:&#10;    import seaborn&#10;    print('oKAY')&#10;except:&#10;    pass&#10;    #print(&quot;could not import stuff&quot;)&#10;        &#10;mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=[&quot;xkcd:lightblue&quot;, &quot;orange&quot;, &quot;green&quot;, &quot;red&quot;, &quot;darkblue&quot;])&#10;&#10;df_orig = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE module(DirectionalAntennasShowcase) AND name(receptionPower:vector)&#10;&#10;&quot;&quot;&quot;)&#10;&#10;runsdf = df_orig[(df_orig.type == 'runattr') &amp; (df_orig.attrname == 'configname')]&#10;&#10;runsdf = runsdf[['run','attrvalue']].set_index('run')&#10;runsdf = runsdf.rename(columns={'attrvalue': 'experiment'})&#10;&#10;df = df_orig[df_orig.type == 'vector']&#10;df.vecvalue *= 1000000000&#10;&#10;vectorsdf = df.join(runsdf, on=&quot;run&quot;, lsuffix=&quot;_dummy&quot;)&#10;&#10;names = vectorsdf.experiment&#10;&#10;df[('name')] = names&#10;&#10;print(&quot;names:&quot;,names)&#10;&#10;print(&quot;df:&quot;,df)&#10;&#10;plt.figure(figsize=(10,6))&#10;&#10;plt.xlabel('Angle [deg]')&#10;plt.ylabel('Reception power [nW]')&#10;&#10;for t in df[['vectime', 'vecvalue', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2]), drawstyle='default')&#10;plt.legend()&#10;plt.title(&quot;&quot;&quot;All antennas&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.xlim(0,360)&#10;&#10;plt.xticks([0,60,120,180,240,300,360])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.savefig('allantennaschart.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
    </charts>
</analysis>
